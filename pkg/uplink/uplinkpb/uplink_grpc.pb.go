// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package uplinkpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// UplinkClient is the client API for Uplink service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UplinkClient interface {
	Register(ctx context.Context, in *RegisterTrigger, opts ...grpc.CallOption) (*RegisterRequest, error)
	Setup(ctx context.Context, in *SetupRequest, opts ...grpc.CallOption) (*SetupResponse, error)
}

type uplinkClient struct {
	cc grpc.ClientConnInterface
}

func NewUplinkClient(cc grpc.ClientConnInterface) UplinkClient {
	return &uplinkClient{cc}
}

func (c *uplinkClient) Register(ctx context.Context, in *RegisterTrigger, opts ...grpc.CallOption) (*RegisterRequest, error) {
	out := new(RegisterRequest)
	err := c.cc.Invoke(ctx, "/Uplink/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uplinkClient) Setup(ctx context.Context, in *SetupRequest, opts ...grpc.CallOption) (*SetupResponse, error) {
	out := new(SetupResponse)
	err := c.cc.Invoke(ctx, "/Uplink/Setup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UplinkServer is the server API for Uplink service.
// All implementations must embed UnimplementedUplinkServer
// for forward compatibility
type UplinkServer interface {
	Register(context.Context, *RegisterTrigger) (*RegisterRequest, error)
	Setup(context.Context, *SetupRequest) (*SetupResponse, error)
	mustEmbedUnimplementedUplinkServer()
}

// UnimplementedUplinkServer must be embedded to have forward compatible implementations.
type UnimplementedUplinkServer struct {
}

func (UnimplementedUplinkServer) Register(context.Context, *RegisterTrigger) (*RegisterRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedUplinkServer) Setup(context.Context, *SetupRequest) (*SetupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Setup not implemented")
}
func (UnimplementedUplinkServer) mustEmbedUnimplementedUplinkServer() {}

// UnsafeUplinkServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UplinkServer will
// result in compilation errors.
type UnsafeUplinkServer interface {
	mustEmbedUnimplementedUplinkServer()
}

func RegisterUplinkServer(s grpc.ServiceRegistrar, srv UplinkServer) {
	s.RegisterService(&_Uplink_serviceDesc, srv)
}

func _Uplink_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterTrigger)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UplinkServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Uplink/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UplinkServer).Register(ctx, req.(*RegisterTrigger))
	}
	return interceptor(ctx, in, info, handler)
}

func _Uplink_Setup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UplinkServer).Setup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Uplink/Setup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UplinkServer).Setup(ctx, req.(*SetupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Uplink_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Uplink",
	HandlerType: (*UplinkServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _Uplink_Register_Handler,
		},
		{
			MethodName: "Setup",
			Handler:    _Uplink_Setup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/uplink/uplinkpb/uplink.proto",
}
