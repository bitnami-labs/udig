// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pkg/tunnel/tunnelpb/tunnel.proto

package tunnelpb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Up struct {
	// This **must** be set on the first `Request` of each `Ingress()` action.
	// If it is set on subsequent calls, it **must** match the value of the
	// first request.
	Header *Up_Header `protobuf:"bytes,2,opt,name=header,proto3" json:"header,omitempty"`
	// If `true`, this indicates that the send is complete. Sending any
	// `Request`s subsequent to one in which `finish` is `true` will
	// cause an error. (i.e. this allows each stream direction to be closed separately
	// which is also what can happen to the tunneled TCP stream anyway).
	Finish bool `protobuf:"varint,3,opt,name=finish,proto3" json:"finish,omitempty"`
	// A portion of the data for the resource. The client **may** leave `data`
	// empty for any given `Request`. This enables the client to inform the
	// service that the request is still live and more data might be coming.
	Data                 []byte   `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Up) Reset()         { *m = Up{} }
func (m *Up) String() string { return proto.CompactTextString(m) }
func (*Up) ProtoMessage()    {}
func (*Up) Descriptor() ([]byte, []int) {
	return fileDescriptor_aeb56902f00e4204, []int{0}
}

func (m *Up) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Up.Unmarshal(m, b)
}
func (m *Up) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Up.Marshal(b, m, deterministic)
}
func (m *Up) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Up.Merge(m, src)
}
func (m *Up) XXX_Size() int {
	return xxx_messageInfo_Up.Size(m)
}
func (m *Up) XXX_DiscardUnknown() {
	xxx_messageInfo_Up.DiscardUnknown(m)
}

var xxx_messageInfo_Up proto.InternalMessageInfo

func (m *Up) GetHeader() *Up_Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *Up) GetFinish() bool {
	if m != nil {
		return m.Finish
	}
	return false
}

func (m *Up) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

// The tunnel broker conveys some information about the original session with the
// client hitting the ingress. This can be useful for logging or for a
// second level virtual hosting if the broker supports wildcard DNS.
type Up_Header struct {
	// <tunnel_id>.udig.io
	//     ^^^
	TunnelId             string   `protobuf:"bytes,1,opt,name=tunnel_id,json=tunnelId,proto3" json:"tunnel_id,omitempty"`
	Protocol             string   `protobuf:"bytes,2,opt,name=protocol,proto3" json:"protocol,omitempty"`
	Saddr                string   `protobuf:"bytes,3,opt,name=saddr,proto3" json:"saddr,omitempty"`
	Daddr                string   `protobuf:"bytes,4,opt,name=daddr,proto3" json:"daddr,omitempty"`
	Sport                int32    `protobuf:"varint,5,opt,name=sport,proto3" json:"sport,omitempty"`
	Dport                int32    `protobuf:"varint,6,opt,name=dport,proto3" json:"dport,omitempty"`
	Sni                  string   `protobuf:"bytes,7,opt,name=sni,proto3" json:"sni,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Up_Header) Reset()         { *m = Up_Header{} }
func (m *Up_Header) String() string { return proto.CompactTextString(m) }
func (*Up_Header) ProtoMessage()    {}
func (*Up_Header) Descriptor() ([]byte, []int) {
	return fileDescriptor_aeb56902f00e4204, []int{0, 0}
}

func (m *Up_Header) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Up_Header.Unmarshal(m, b)
}
func (m *Up_Header) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Up_Header.Marshal(b, m, deterministic)
}
func (m *Up_Header) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Up_Header.Merge(m, src)
}
func (m *Up_Header) XXX_Size() int {
	return xxx_messageInfo_Up_Header.Size(m)
}
func (m *Up_Header) XXX_DiscardUnknown() {
	xxx_messageInfo_Up_Header.DiscardUnknown(m)
}

var xxx_messageInfo_Up_Header proto.InternalMessageInfo

func (m *Up_Header) GetTunnelId() string {
	if m != nil {
		return m.TunnelId
	}
	return ""
}

func (m *Up_Header) GetProtocol() string {
	if m != nil {
		return m.Protocol
	}
	return ""
}

func (m *Up_Header) GetSaddr() string {
	if m != nil {
		return m.Saddr
	}
	return ""
}

func (m *Up_Header) GetDaddr() string {
	if m != nil {
		return m.Daddr
	}
	return ""
}

func (m *Up_Header) GetSport() int32 {
	if m != nil {
		return m.Sport
	}
	return 0
}

func (m *Up_Header) GetDport() int32 {
	if m != nil {
		return m.Dport
	}
	return 0
}

func (m *Up_Header) GetSni() string {
	if m != nil {
		return m.Sni
	}
	return ""
}

type Down struct {
	// A portion of the data for the resource. The service **may** leave `data`
	// empty for any given `Response`. This enables the service to inform the
	// client that the request is still live and more data might be coming.
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	// If `true`, this indicates that the send is complete. Sending any
	// `Request`s subsequent to one in which `finish` is `true` will
	// cause an error.
	Finish               bool     `protobuf:"varint,2,opt,name=finish,proto3" json:"finish,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Down) Reset()         { *m = Down{} }
func (m *Down) String() string { return proto.CompactTextString(m) }
func (*Down) ProtoMessage()    {}
func (*Down) Descriptor() ([]byte, []int) {
	return fileDescriptor_aeb56902f00e4204, []int{1}
}

func (m *Down) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Down.Unmarshal(m, b)
}
func (m *Down) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Down.Marshal(b, m, deterministic)
}
func (m *Down) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Down.Merge(m, src)
}
func (m *Down) XXX_Size() int {
	return xxx_messageInfo_Down.Size(m)
}
func (m *Down) XXX_DiscardUnknown() {
	xxx_messageInfo_Down.DiscardUnknown(m)
}

var xxx_messageInfo_Down proto.InternalMessageInfo

func (m *Down) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Down) GetFinish() bool {
	if m != nil {
		return m.Finish
	}
	return false
}

func init() {
	proto.RegisterType((*Up)(nil), "Up")
	proto.RegisterType((*Up_Header)(nil), "Up.Header")
	proto.RegisterType((*Down)(nil), "Down")
}

func init() { proto.RegisterFile("pkg/tunnel/tunnelpb/tunnel.proto", fileDescriptor_aeb56902f00e4204) }

var fileDescriptor_aeb56902f00e4204 = []byte{
	// 271 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x90, 0xcf, 0x4a, 0xc4, 0x30,
	0x10, 0x87, 0x99, 0xfe, 0x89, 0xed, 0xe8, 0x41, 0x82, 0x48, 0xa8, 0x97, 0x50, 0x10, 0x72, 0xaa,
	0x52, 0xdf, 0x40, 0x3c, 0xe8, 0xc5, 0x43, 0xb4, 0x17, 0x2f, 0xd2, 0x35, 0xd5, 0x2d, 0xae, 0x6d,
	0x48, 0x23, 0x7b, 0xf7, 0x75, 0x7c, 0x49, 0xe9, 0xa4, 0xbb, 0xee, 0x29, 0xf3, 0xfb, 0x92, 0xc9,
	0xe4, 0x0b, 0x4a, 0xfb, 0xf9, 0x71, 0xe5, 0xbf, 0x87, 0xa1, 0xdb, 0x2c, 0x8b, 0x5d, 0x2d, 0x45,
	0x65, 0xdd, 0xe8, 0xc7, 0xf2, 0x27, 0xc2, 0xa8, 0xb1, 0xbc, 0x44, 0xb6, 0xee, 0x5a, 0xd3, 0x39,
	0x11, 0x49, 0x50, 0xc7, 0x35, 0x56, 0x8d, 0xad, 0xee, 0x89, 0xe8, 0x65, 0x87, 0x9f, 0x23, 0x7b,
	0xef, 0x87, 0x7e, 0x5a, 0x8b, 0x58, 0x82, 0xca, 0xf4, 0x92, 0x38, 0xc7, 0xc4, 0xb4, 0xbe, 0x15,
	0x89, 0x04, 0x75, 0xa2, 0xa9, 0x2e, 0x7e, 0x01, 0x59, 0x68, 0xe7, 0x17, 0x98, 0x87, 0x89, 0xaf,
	0xbd, 0x11, 0x20, 0x41, 0xe5, 0x3a, 0x0b, 0xe0, 0xc1, 0xf0, 0x02, 0x33, 0x7a, 0xc7, 0xdb, 0xb8,
	0xa1, 0xc9, 0xb9, 0xde, 0x67, 0x7e, 0x86, 0xe9, 0xd4, 0x1a, 0xe3, 0x68, 0x5c, 0xae, 0x43, 0x98,
	0xa9, 0x21, 0x9a, 0x04, 0x6a, 0x76, 0x74, 0xb2, 0xa3, 0xf3, 0x22, 0x95, 0xa0, 0x52, 0x1d, 0x02,
	0x9d, 0x25, 0xca, 0x02, 0xa5, 0xc0, 0x4f, 0x31, 0x9e, 0x86, 0x5e, 0x1c, 0x51, 0xff, 0x5c, 0x96,
	0x35, 0x26, 0x77, 0xe3, 0x76, 0xd8, 0x9b, 0xc0, 0xbf, 0xc9, 0x81, 0x75, 0x74, 0x68, 0x5d, 0x5f,
	0x22, 0x7b, 0x26, 0x8b, 0x59, 0xf0, 0xb1, 0xdb, 0x3e, 0x79, 0xd7, 0xb5, 0x5f, 0x3c, 0xae, 0x1a,
	0x5b, 0xa4, 0xd5, 0x7c, 0x9d, 0x82, 0x6b, 0xb8, 0xc5, 0x97, 0x6c, 0xf7, 0xf1, 0x2b, 0x46, 0x6a,
	0x37, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x05, 0x2d, 0x26, 0x22, 0x96, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TunnelClient is the client API for Tunnel service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TunnelClient interface {
	NewStream(ctx context.Context, opts ...grpc.CallOption) (Tunnel_NewStreamClient, error)
}

type tunnelClient struct {
	cc *grpc.ClientConn
}

func NewTunnelClient(cc *grpc.ClientConn) TunnelClient {
	return &tunnelClient{cc}
}

func (c *tunnelClient) NewStream(ctx context.Context, opts ...grpc.CallOption) (Tunnel_NewStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Tunnel_serviceDesc.Streams[0], "/Tunnel/NewStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &tunnelNewStreamClient{stream}
	return x, nil
}

type Tunnel_NewStreamClient interface {
	Send(*Up) error
	Recv() (*Down, error)
	grpc.ClientStream
}

type tunnelNewStreamClient struct {
	grpc.ClientStream
}

func (x *tunnelNewStreamClient) Send(m *Up) error {
	return x.ClientStream.SendMsg(m)
}

func (x *tunnelNewStreamClient) Recv() (*Down, error) {
	m := new(Down)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TunnelServer is the server API for Tunnel service.
type TunnelServer interface {
	NewStream(Tunnel_NewStreamServer) error
}

func RegisterTunnelServer(s *grpc.Server, srv TunnelServer) {
	s.RegisterService(&_Tunnel_serviceDesc, srv)
}

func _Tunnel_NewStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TunnelServer).NewStream(&tunnelNewStreamServer{stream})
}

type Tunnel_NewStreamServer interface {
	Send(*Down) error
	Recv() (*Up, error)
	grpc.ServerStream
}

type tunnelNewStreamServer struct {
	grpc.ServerStream
}

func (x *tunnelNewStreamServer) Send(m *Down) error {
	return x.ServerStream.SendMsg(m)
}

func (x *tunnelNewStreamServer) Recv() (*Up, error) {
	m := new(Up)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Tunnel_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Tunnel",
	HandlerType: (*TunnelServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "NewStream",
			Handler:       _Tunnel_NewStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "pkg/tunnel/tunnelpb/tunnel.proto",
}
