// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.14.0
// source: pkg/tunnel/tunnelpb/tunnel.proto

package tunnelpb

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Up struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This **must** be set on the first `Request` of each `Ingress()` action.
	// If it is set on subsequent calls, it **must** match the value of the
	// first request.
	Header *Up_Header `protobuf:"bytes,2,opt,name=header,proto3" json:"header,omitempty"`
	// If `true`, this indicates that the send is complete. Sending any
	// `Request`s subsequent to one in which `finish` is `true` will
	// cause an error. (i.e. this allows each stream direction to be closed separately
	// which is also what can happen to the tunneled TCP stream anyway).
	Finish bool `protobuf:"varint,3,opt,name=finish,proto3" json:"finish,omitempty"`
	// A portion of the data for the resource. The client **may** leave `data`
	// empty for any given `Request`. This enables the client to inform the
	// service that the request is still live and more data might be coming.
	Data []byte `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *Up) Reset() {
	*x = Up{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_tunnel_tunnelpb_tunnel_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Up) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Up) ProtoMessage() {}

func (x *Up) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_tunnel_tunnelpb_tunnel_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Up.ProtoReflect.Descriptor instead.
func (*Up) Descriptor() ([]byte, []int) {
	return file_pkg_tunnel_tunnelpb_tunnel_proto_rawDescGZIP(), []int{0}
}

func (x *Up) GetHeader() *Up_Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *Up) GetFinish() bool {
	if x != nil {
		return x.Finish
	}
	return false
}

func (x *Up) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type Down struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A portion of the data for the resource. The service **may** leave `data`
	// empty for any given `Response`. This enables the service to inform the
	// client that the request is still live and more data might be coming.
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	// If `true`, this indicates that the send is complete. Sending any
	// `Request`s subsequent to one in which `finish` is `true` will
	// cause an error.
	Finish bool `protobuf:"varint,2,opt,name=finish,proto3" json:"finish,omitempty"`
}

func (x *Down) Reset() {
	*x = Down{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_tunnel_tunnelpb_tunnel_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Down) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Down) ProtoMessage() {}

func (x *Down) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_tunnel_tunnelpb_tunnel_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Down.ProtoReflect.Descriptor instead.
func (*Down) Descriptor() ([]byte, []int) {
	return file_pkg_tunnel_tunnelpb_tunnel_proto_rawDescGZIP(), []int{1}
}

func (x *Down) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Down) GetFinish() bool {
	if x != nil {
		return x.Finish
	}
	return false
}

// The tunnel broker conveys some information about the original session with the
// client hitting the ingress. This can be useful for logging or for a
// second level virtual hosting if the broker supports wildcard DNS.
type Up_Header struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// <tunnel_id>.udig.io
	//     ^^^
	TunnelId string `protobuf:"bytes,1,opt,name=tunnel_id,json=tunnelId,proto3" json:"tunnel_id,omitempty"`
	Protocol string `protobuf:"bytes,2,opt,name=protocol,proto3" json:"protocol,omitempty"` // *must* be "TCP" for now.
	Saddr    string `protobuf:"bytes,3,opt,name=saddr,proto3" json:"saddr,omitempty"`
	Daddr    string `protobuf:"bytes,4,opt,name=daddr,proto3" json:"daddr,omitempty"`
	Sport    int32  `protobuf:"varint,5,opt,name=sport,proto3" json:"sport,omitempty"`
	Dport    int32  `protobuf:"varint,6,opt,name=dport,proto3" json:"dport,omitempty"`
	Sni      string `protobuf:"bytes,7,opt,name=sni,proto3" json:"sni,omitempty"` // e.g. foo.bar.<tunnel_id>.udig.io
}

func (x *Up_Header) Reset() {
	*x = Up_Header{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_tunnel_tunnelpb_tunnel_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Up_Header) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Up_Header) ProtoMessage() {}

func (x *Up_Header) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_tunnel_tunnelpb_tunnel_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Up_Header.ProtoReflect.Descriptor instead.
func (*Up_Header) Descriptor() ([]byte, []int) {
	return file_pkg_tunnel_tunnelpb_tunnel_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Up_Header) GetTunnelId() string {
	if x != nil {
		return x.TunnelId
	}
	return ""
}

func (x *Up_Header) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *Up_Header) GetSaddr() string {
	if x != nil {
		return x.Saddr
	}
	return ""
}

func (x *Up_Header) GetDaddr() string {
	if x != nil {
		return x.Daddr
	}
	return ""
}

func (x *Up_Header) GetSport() int32 {
	if x != nil {
		return x.Sport
	}
	return 0
}

func (x *Up_Header) GetDport() int32 {
	if x != nil {
		return x.Dport
	}
	return 0
}

func (x *Up_Header) GetSni() string {
	if x != nil {
		return x.Sni
	}
	return ""
}

var File_pkg_tunnel_tunnelpb_tunnel_proto protoreflect.FileDescriptor

var file_pkg_tunnel_tunnelpb_tunnel_proto_rawDesc = []byte{
	0x0a, 0x20, 0x70, 0x6b, 0x67, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x74, 0x75, 0x6e,
	0x6e, 0x65, 0x6c, 0x70, 0x62, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x82, 0x02, 0x0a, 0x02, 0x55, 0x70, 0x12, 0x22, 0x0a, 0x06, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x55, 0x70, 0x2e, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x16, 0x0a,
	0x06, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x66,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0xab, 0x01, 0x0a, 0x06, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x61, 0x64, 0x64, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x61,
	0x64, 0x64, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x61, 0x64, 0x64, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x64, 0x61, 0x64, 0x64, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x64, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x64, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x6e, 0x69, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x73, 0x6e, 0x69, 0x22, 0x32, 0x0a, 0x04, 0x44, 0x6f, 0x77, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x32, 0x25, 0x0a, 0x06, 0x54,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x4e, 0x65, 0x77, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x12, 0x03, 0x2e, 0x55, 0x70, 0x1a, 0x05, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x28, 0x01,
	0x30, 0x01, 0x42, 0x32, 0x5a, 0x30, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x62, 0x69, 0x74, 0x6e, 0x61, 0x6d, 0x69, 0x2d, 0x6c, 0x61, 0x62, 0x73, 0x2f, 0x75, 0x64,
	0x69, 0x67, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x74, 0x75,
	0x6e, 0x6e, 0x65, 0x6c, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pkg_tunnel_tunnelpb_tunnel_proto_rawDescOnce sync.Once
	file_pkg_tunnel_tunnelpb_tunnel_proto_rawDescData = file_pkg_tunnel_tunnelpb_tunnel_proto_rawDesc
)

func file_pkg_tunnel_tunnelpb_tunnel_proto_rawDescGZIP() []byte {
	file_pkg_tunnel_tunnelpb_tunnel_proto_rawDescOnce.Do(func() {
		file_pkg_tunnel_tunnelpb_tunnel_proto_rawDescData = protoimpl.X.CompressGZIP(file_pkg_tunnel_tunnelpb_tunnel_proto_rawDescData)
	})
	return file_pkg_tunnel_tunnelpb_tunnel_proto_rawDescData
}

var file_pkg_tunnel_tunnelpb_tunnel_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_pkg_tunnel_tunnelpb_tunnel_proto_goTypes = []interface{}{
	(*Up)(nil),        // 0: Up
	(*Down)(nil),      // 1: Down
	(*Up_Header)(nil), // 2: Up.Header
}
var file_pkg_tunnel_tunnelpb_tunnel_proto_depIdxs = []int32{
	2, // 0: Up.header:type_name -> Up.Header
	0, // 1: Tunnel.NewStream:input_type -> Up
	1, // 2: Tunnel.NewStream:output_type -> Down
	2, // [2:3] is the sub-list for method output_type
	1, // [1:2] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_pkg_tunnel_tunnelpb_tunnel_proto_init() }
func file_pkg_tunnel_tunnelpb_tunnel_proto_init() {
	if File_pkg_tunnel_tunnelpb_tunnel_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pkg_tunnel_tunnelpb_tunnel_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Up); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_tunnel_tunnelpb_tunnel_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Down); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_tunnel_tunnelpb_tunnel_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Up_Header); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pkg_tunnel_tunnelpb_tunnel_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pkg_tunnel_tunnelpb_tunnel_proto_goTypes,
		DependencyIndexes: file_pkg_tunnel_tunnelpb_tunnel_proto_depIdxs,
		MessageInfos:      file_pkg_tunnel_tunnelpb_tunnel_proto_msgTypes,
	}.Build()
	File_pkg_tunnel_tunnelpb_tunnel_proto = out.File
	file_pkg_tunnel_tunnelpb_tunnel_proto_rawDesc = nil
	file_pkg_tunnel_tunnelpb_tunnel_proto_goTypes = nil
	file_pkg_tunnel_tunnelpb_tunnel_proto_depIdxs = nil
}
